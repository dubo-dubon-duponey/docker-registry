{
#	{$debug}
	https_port {$PORT}
	default_sni {$DOMAIN}
	admin off
	storage file_system {
		root "/certs"
	}
	auto_https disable_redirects
}

https://{$DOMAIN} {
	tls {$TLS} {
    client_auth {
      mode {$MTLS_MODE}
      # Technically could/should be a different root cert
      # Ideally, a separate caddy would be in charge of delivering client certs on demand maybe against credentials?
      # Of course that would downgrade the cert auth to that of the credentials then... So, for now, keep it manual / out of band
      trusted_ca_cert_file "/certs/pki/authorities/local/root.crt"
    }
	}

  log {
    output stdout
    format json
    level {$LOG_LEVEL}
  }

  # https://securityheaders.com/
  header {
    X-Xss-Protection "1; mode=block"

    # clickjacking protection
    X-Frame-Options DENY

    # disable clients from sniffing the media type
    X-Content-Type-Options nosniff

    # keep referrer data off of HTTP connections
    # Referrer-Policy no-referrer-when-downgrade
    # Referrer-Policy "same-origin"
    Referrer-Policy "strict-origin-when-cross-origin"

    # enable HSTS
    Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

    # CSP
    Content-Security-Policy "default-src 'self';"

    # Signature
    Server "DuboDubonDuponey/1.0 (Caddy/2)"

    # These are registry specific
    # XXX that should be limited to /v2/_ping or something - it's duplicated right now
    Docker-Distribution-API-Version "registry/2.0"
  }

  @pull_disabled {
    expression '{$PULL}' == 'disabled'
    method HEAD GET
    path /v2/*
  }

  @pull_anonymous {
    expression '{$PULL}' == 'anonymous'
    method HEAD GET
    path /v2/*
  }

  @pull_authenticated {
    expression '{$PULL}' == 'authenticated'
    method HEAD GET
    path /v2/*
  }

  @push_disabled {
    expression '{$PUSH}' == 'disabled'
    method POST PUT PATCH DELETE
    path /v2/*
  }

  # That does not make any sense
  #@push_anonymous {
  #  expression '{$PUSH}' == 'anonymous'
  #  method POST PUT PATCH DELETE
  #  path /v2/*
  #}

  @push_authenticated {
    expression '{$PUSH}' == 'authenticated'
    method POST PUT PATCH DELETE
    path /v2/*
  }

  handle @pull_disabled {
    respond 403 {
      body "{\"details\": \"Pull is disabled on this server\"}"
      close
    }
  }

  handle @push_disabled {
    respond 403 {
      body "{\"details\": \"Push is disabled on this server\"}"
      close
    }
  }

  handle @pull_anonymous {
    reverse_proxy http://127.0.0.1:42042
  }

  #handle @push_anonymous {
  #  reverse_proxy http://127.0.0.1:42042
  #}

  handle @pull_authenticated {
    basicauth bcrypt "{$REALM}" {
      {$USERNAME} {$PASSWORD}
    }
    reverse_proxy http://127.0.0.1:42042 {
      header_up X-Real-IP {remote_ip}
      header_up X-Forwarded-Proto {scheme}
    }
  }

  handle @push_authenticated {
    basicauth bcrypt "{$REALM}" {
      {$USERNAME} {$PASSWORD}
    }
    reverse_proxy http://127.0.0.1:42042 {
      header_up X-Real-IP {remote_ip}
      header_up X-Forwarded-Proto {scheme}
    }
  }
}

# Healthcheck
{$HEALTHCHECK_URL} {
  rewrite / /v2/
  reverse_proxy http://127.0.0.1:42042
}
